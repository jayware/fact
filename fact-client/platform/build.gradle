import de.undercouch.gradle.tasks.download.Download
import de.undercouch.gradle.tasks.download.Verify

plugins {
    id "de.undercouch.download" version "2.1.0"
}

evaluationDependsOn(':fact-client:modules:fact-client-application')

configure([project('linux-x64'),
           project('macosx-x64'),
           project('windows-x64')]) {

    ext.platformDir = new File(buildDir, 'platform')

    task downloadFramework(type: Download) {
        src frameworkUrl
        dest file("${downloadsDir}/framework.tar.gz")
        onlyIfNewer true
    }

    task verifyFramework(type: Verify, dependsOn: downloadFramework) {
        src downloadFramework.dest
        algorithm "MD5"
        checksum frameworkChecksum
    }

    task extractFramework(type: Copy, dependsOn: verifyFramework) {
        def tarParent;
        from (tarTree(downloadFramework.dest)) {
            eachFile { details ->
                tarParent = details.relativePath.segments[0]
                details.path = (details.path - tarParent)
            }
            exclude '**/bundle/', '**/doc/', '**/conf/', '**/DEPENDENCIES', '**/LICENSE*', '**/NOTICE'
        }
        into platformDir
    }

    task downloadJre(type: Download) {
        src platformJreUrl
        dest file("${downloadsDir}/jre-${platformArch}.tar.gz")
        onlyIfNewer true
        header "Cookie", "oraclelicense=accept-securebackup-cookie"
    }

    task verifyJre(type: Verify, dependsOn: downloadJre) {
        src downloadJre.dest
        algorithm "MD5"
        checksum platformJreChecksum
    }

    task extractJre(type: Copy, dependsOn: verifyJre) {
        def jreDir = "${platformDir}/jre"
        def tarParent;
        from (tarTree(downloadJre.dest)) {
            eachFile { details ->
                tarParent = details.relativePath.segments[0]
                details.path = (details.path - tarParent)
            }
        }
        into jreDir
        doLast {
            delete file("${jreDir}/${tarParent}")
        }
    }

    task copyModules(type: Copy) {
        from project(':fact-client:modules:fact-client-application').configurations.runtime {
            // TODO: fix configuration to exclude these JARs automatically.
            exclude 'lwjgl-3.0.0b.jar',
                    'lwjgl-platform-3.0.0b-natives-linux.jar',
                    'lwjgl-platform-3.0.0b-natives-osx.jar',
                    'lwjgl-platform-3.0.0b-natives-windows.jar'
        }

        into "${platformDir}/modules"
    }

    task copyScripts(type: Copy) {
        from fileTree('src')
        from fileTree(project(':fact-client:platform:common').file('src'))
        into platformDir
    }

    task build(dependsOn: [extractFramework, extractJre, copyModules, copyScripts]) {}

    task dist(type: Tar, dependsOn: build) {
        from platformDir
        destinationDir buildDir
        extension 'tar.gz'
        baseName "fact-client-${platformArch}"
    }

    task cleanPlatform(type: Delete) {
        delete platformDir
    }

    task cleanDistribution(type: Delete) {
        delete dist
    }

    task clean(type: Delete, dependsOn: [cleanPlatform, cleanDistribution]) {
        delete buildDir
    }
}